-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module LondoGQL.Enum.Bucket exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Bucket
    = Below60
    | Below30
    | Below20
    | Exactly100
    | Below100
    | Below40
    | Below70
    | Below80
    | Below50
    | Below90
    | Below10


list : List Bucket
list =
    [ Below60, Below30, Below20, Exactly100, Below100, Below40, Below70, Below80, Below50, Below90, Below10 ]


decoder : Decoder Bucket
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Below60" ->
                        Decode.succeed Below60

                    "Below30" ->
                        Decode.succeed Below30

                    "Below20" ->
                        Decode.succeed Below20

                    "Exactly100" ->
                        Decode.succeed Exactly100

                    "Below100" ->
                        Decode.succeed Below100

                    "Below40" ->
                        Decode.succeed Below40

                    "Below70" ->
                        Decode.succeed Below70

                    "Below80" ->
                        Decode.succeed Below80

                    "Below50" ->
                        Decode.succeed Below50

                    "Below90" ->
                        Decode.succeed Below90

                    "Below10" ->
                        Decode.succeed Below10

                    _ ->
                        Decode.fail ("Invalid Bucket type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Bucket -> String
toString enum____ =
    case enum____ of
        Below60 ->
            "Below60"

        Below30 ->
            "Below30"

        Below20 ->
            "Below20"

        Exactly100 ->
            "Exactly100"

        Below100 ->
            "Below100"

        Below40 ->
            "Below40"

        Below70 ->
            "Below70"

        Below80 ->
            "Below80"

        Below50 ->
            "Below50"

        Below90 ->
            "Below90"

        Below10 ->
            "Below10"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Bucket
fromString enumString____ =
    case enumString____ of
        "Below60" ->
            Just Below60

        "Below30" ->
            Just Below30

        "Below20" ->
            Just Below20

        "Exactly100" ->
            Just Exactly100

        "Below100" ->
            Just Below100

        "Below40" ->
            Just Below40

        "Below70" ->
            Just Below70

        "Below80" ->
            Just Below80

        "Below50" ->
            Just Below50

        "Below90" ->
            Just Below90

        "Below10" ->
            Just Below10

        _ ->
            Nothing
