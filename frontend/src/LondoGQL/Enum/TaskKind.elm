-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module LondoGQL.Enum.TaskKind exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TaskKind
    = Discrete
    | Percent
    | Fraction


list : List TaskKind
list =
    [ Discrete, Percent, Fraction ]


decoder : Decoder TaskKind
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "Discrete" ->
                        Decode.succeed Discrete

                    "Percent" ->
                        Decode.succeed Percent

                    "Fraction" ->
                        Decode.succeed Fraction

                    _ ->
                        Decode.fail ("Invalid TaskKind type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TaskKind -> String
toString enum____ =
    case enum____ of
        Discrete ->
            "Discrete"

        Percent ->
            "Percent"

        Fraction ->
            "Fraction"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TaskKind
fromString enumString____ =
    case enumString____ of
        "Discrete" ->
            Just Discrete

        "Percent" ->
            Just Percent

        "Fraction" ->
            Just Fraction

        _ ->
            Nothing
