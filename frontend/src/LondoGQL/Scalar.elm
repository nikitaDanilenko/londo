-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module LondoGQL.Scalar exposing (BigDecimal(..), BigInt(..), Codecs, Unit(..), Uuid(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type BigDecimal
    = BigDecimal String


type BigInt
    = BigInt String


type Unit
    = Unit String


type Uuid
    = Uuid String


defineCodecs :
    { codecBigDecimal : Codec valueBigDecimal
    , codecBigInt : Codec valueBigInt
    , codecUnit : Codec valueUnit
    , codecUuid : Codec valueUuid
    }
    -> Codecs valueBigDecimal valueBigInt valueUnit valueUuid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueBigDecimal valueBigInt valueUnit valueUuid
    ->
        { codecBigDecimal : Codec valueBigDecimal
        , codecBigInt : Codec valueBigInt
        , codecUnit : Codec valueUnit
        , codecUuid : Codec valueUuid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueBigDecimal valueBigInt valueUnit valueUuid -> Codec getterValue)
    -> Codecs valueBigDecimal valueBigInt valueUnit valueUuid
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueBigDecimal valueBigInt valueUnit valueUuid
    = Codecs (RawCodecs valueBigDecimal valueBigInt valueUnit valueUuid)


type alias RawCodecs valueBigDecimal valueBigInt valueUnit valueUuid =
    { codecBigDecimal : Codec valueBigDecimal
    , codecBigInt : Codec valueBigInt
    , codecUnit : Codec valueUnit
    , codecUuid : Codec valueUuid
    }


defaultCodecs : RawCodecs BigDecimal BigInt Unit Uuid
defaultCodecs =
    { codecBigDecimal =
        { encoder = \(BigDecimal raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map BigDecimal
        }
    , codecBigInt =
        { encoder = \(BigInt raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map BigInt
        }
    , codecUnit =
        { encoder = \(Unit raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Unit
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    }
