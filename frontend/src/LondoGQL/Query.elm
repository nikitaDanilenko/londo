-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module LondoGQL.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import LondoGQL.InputObject
import LondoGQL.Interface
import LondoGQL.Object
import LondoGQL.Scalar
import LondoGQL.ScalarCodecs
import LondoGQL.Union


fetchUser :
    SelectionSet decodesTo LondoGQL.Object.User
    -> SelectionSet decodesTo RootQuery
fetchUser object____ =
    Object.selectionForCompositeField "fetchUser" [] object____ Basics.identity


type alias FindUserRequiredArguments =
    { input : LondoGQL.InputObject.FindUserInput }


findUser :
    FindUserRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.FindUserResult
    -> SelectionSet (List decodesTo) RootQuery
findUser requiredArgs____ object____ =
    Object.selectionForCompositeField "findUser" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFindUserInput ] object____ (Basics.identity >> Decode.list)


type alias FetchProjectRequiredArguments =
    { input : LondoGQL.InputObject.FetchProjectInput }


fetchProject :
    FetchProjectRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.Project
    -> SelectionSet decodesTo RootQuery
fetchProject requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchProject" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchProjectInput ] object____ Basics.identity


type alias FetchResolvedProjectRequiredArguments =
    { input : LondoGQL.InputObject.FetchResolvedProjectInput }


fetchResolvedProject :
    FetchResolvedProjectRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.ResolvedProject
    -> SelectionSet decodesTo RootQuery
fetchResolvedProject requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchResolvedProject" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchResolvedProjectInput ] object____ Basics.identity


fetchAllProjects :
    SelectionSet decodesTo LondoGQL.Object.Project
    -> SelectionSet (List decodesTo) RootQuery
fetchAllProjects object____ =
    Object.selectionForCompositeField "fetchAllProjects" [] object____ (Basics.identity >> Decode.list)


type alias FetchDashboardRequiredArguments =
    { input : LondoGQL.InputObject.FetchDashboardInput }


fetchDashboard :
    FetchDashboardRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.Dashboard
    -> SelectionSet decodesTo RootQuery
fetchDashboard requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchDashboard" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchDashboardInput ] object____ Basics.identity


type alias FetchResolvedDashboardRequiredArguments =
    { input : LondoGQL.InputObject.FetchResolvedDashboardInput }


fetchResolvedDashboard :
    FetchResolvedDashboardRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.ResolvedDashboard
    -> SelectionSet decodesTo RootQuery
fetchResolvedDashboard requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchResolvedDashboard" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchResolvedDashboardInput ] object____ Basics.identity


fetchAllDashboards :
    SelectionSet decodesTo LondoGQL.Object.Dashboard
    -> SelectionSet (List decodesTo) RootQuery
fetchAllDashboards object____ =
    Object.selectionForCompositeField "fetchAllDashboards" [] object____ (Basics.identity >> Decode.list)


type alias FetchDashboardAnalysisRequiredArguments =
    { input : LondoGQL.InputObject.FetchDashboardAnalysisInput }


fetchDashboardAnalysis :
    FetchDashboardAnalysisRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.DashboardAnalysis
    -> SelectionSet decodesTo RootQuery
fetchDashboardAnalysis requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchDashboardAnalysis" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchDashboardAnalysisInput ] object____ Basics.identity


type alias FetchPublicDashboardAnalysisRequiredArguments =
    { input : LondoGQL.InputObject.FetchDashboardAnalysisInput }


fetchPublicDashboardAnalysis :
    FetchPublicDashboardAnalysisRequiredArguments
    -> SelectionSet decodesTo LondoGQL.Object.DashboardAnalysis
    -> SelectionSet decodesTo RootQuery
fetchPublicDashboardAnalysis requiredArgs____ object____ =
    Object.selectionForCompositeField "fetchPublicDashboardAnalysis" [ Argument.required "input" requiredArgs____.input LondoGQL.InputObject.encodeFetchDashboardAnalysisInput ] object____ Basics.identity
